# -*- coding: utf-8 -*-
"""GetPrivacyClass.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TzzcApk3JDzVNYEPk77jceOKt-J4aIUC
"""

import torch
from transformers import BertTokenizer, BertForSequenceClassification
import sys


# Example usage:
#input_num = 3
#array_string = get_array_string(input_num)
#print(f"The corresponding array string for input number {input_num} is: {array_string}")


# Load pre-trained BERT model and tokenizer
model_path = 'best_model_training42.pt'  # Update with the correct local file path
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
# Instantiate the model
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=10)

# Set model to evaluation mode
model.eval()

# Continue with the rest of the inference code
# ...

def get_array_string(input_num):
    array_strings = {
        0: 'Data Retention',
        1: 'Data Security',
        2: 'Do Not Track',
        3: 'First Party Collection/Use',
        4: 'International and Specific Audiences',
        5: 'Other',
        6: 'Policy Change',
        7: 'Third Party Sharing/Collection',
        8: 'User Access, Edit and Deletion',
        9: 'User Choice/Control'
    }

    return array_strings.get(input_num, 'Invalid input number')



def predicted_label( privacy_policy_text):
    # Read privacy policy text from file
    #file_path = 'privacy_policyNPR.txt'

    # Tokenize input text
    inputs = tokenizer(privacy_policy_text, return_tensors='pt', padding=True, truncation=True)

    # Perform inference
    with torch.no_grad():
        outputs = model(**inputs)

    # Get predicted label
    predicted_label = torch.argmax(outputs.logits, dim=1).item()
    value = outputs.logits

    # Print predicted class
    #print("Full Class Data: ", value)
    '''"Predicted Class:",predicted_label, " --> ",'''
    print(get_array_string(predicted_label))

# total arguments
n = len(sys.argv)
#print("Total arguments passed:", n)

# Arguments passed
#print("\nName of Python script:", sys.argv[0])

#print("\nArguments passed:", end = " ")
#for i in range(1, n):
#    print(sys.argv[i], end = " ")

# Addition of numbers
Sum = 0
# Using argparse module
for i in range(1, n):
    predicted_label(sys.argv[i])

#!getPrivacyClass.ipynb privacy_policy.txt

